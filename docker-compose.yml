version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: space-weather-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-spaceweather}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_DB: ${DB_NAME:-spaceweather}
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-spaceweather}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: space-weather-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: space-weather-app
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "5000:5000"
    environment:
      # Database
      DATABASE_URL: postgresql://${DB_USER:-spaceweather}:${DB_PASSWORD:-changeme}@postgres:5432/${DB_NAME:-spaceweather}?schema=public
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # Authentication
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      
      # LLM Providers
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      DEFAULT_LLM_PROVIDER: ${DEFAULT_LLM_PROVIDER:-openai}
      
      # Security
      CSRF_SECRET: ${CSRF_SECRET}
      API_KEY_SECRET: ${API_KEY_SECRET}
      
      # Python Backend
      PYTHON_BACKEND_URL: http://localhost:5000
      
      # Next.js
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3000}
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: space-weather-network